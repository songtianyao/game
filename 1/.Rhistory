install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
??read_json
read_json(link, simplifyVector = FALSE)
link<-https://github.com/pwxcoo/chinese-xinhua
link<-"https://github.com/pwxcoo/chinese-xinhua"
read_json(link, simplifyVector = FALSE)
data<-fromJSON(idiom.json)
data<-fromJSON(file="idiom.json")
??fromJSON()
# Run the application
shinyApp(ui = ui, server = server)
#read the idioms
Idioms <- read.table(file = "C:/Users/86133/Desktop/try2/A_Z.txt")
#trans to vector
Vector_Idioms <- as.vector(as.matrix(Idioms))
#function read the last char
getlastKey <- function(input_idioms)
{
key <- stri_sub(input_idioms, from = -1)
return(key)
}
#function read the first char
getfirstKeys <- function(input_idioms)
{
key <- stri_sub(input_idioms, from = 1,to = 1)
return(key)
}
#get the fisrt char index
keys <- getfirstKeys(Vector_Idioms)
lookupIdioms <- function (find_idioms,max_found = 5) {
if(length(which(Vector_Idioms == find_idioms))==0) return("你输入的不是成语")
#get the last char
key <- getlastKey(find_idioms)
found <- which(keys == key)
if (length(found) > max_found) return(Vector_Idioms[found[1:max_found]])
if (length(found) == 0) return("找不到可以接龙的成语")
if (length(found) <= max_found) return(Vector_Idioms[found])
}
ui <- fluidPage(
#shinythemes::themeSelector(),
theme = shinytheme("flatly"),
# Application title
titlePanel("成语接龙"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput("idioms_id",label ="请输入查询的成语",value = " "),
actionButton("update", "查询")
),
# Show the result
mainPanel(
h3("查询结果:"),
verbatimTextOutput("textPlot")
)
)
)
server <- function(input, output) {
results <- eventReactive(input$update, {
lookupIdioms(trimws(input$idioms_id),max_found = 5)
})
output$textPlot <- renderText(results())
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(stringi)
library(shinythemes)
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server(1:3))
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
#shinythemes::themeSelector(),
theme = shinytheme("flatly"),
# Application title
titlePanel("成语接龙"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput("idioms_id",label ="请输入一个成语",value = " "),
actionButton("update", "Start")
),
# Show the result
mainPanel(
h3("成语接龙:"),
verbatimTextOutput("textPlot")
)
)
)
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
#shinythemes::themeSelector(),
theme = shinytheme("flatly"),
# Application title
titlePanel("成语接龙"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput("idioms_id",label ="请输入一个成语",value = " "),
actionButton("update", "continue")
),
# Show the result
mainPanel(
h3("成语接龙:"),
verbatimTextOutput("textPlot")
)
)
)
lookupIdioms(trimws(input$idioms_id),max_found = 1)
if (length(found) <= max_found) return(Vector_Idioms[found[1:max_found]])
lookupIdioms <- function (find_idioms,max_found = 1) {
if(length(which(Vector_Idioms == find_idioms))==0) return("你输入的不是成语")
#get the last char
key <- getlastKey(find_idioms)
found <- which(keys == key)
if (length(found) > max_found) return(Vector_Idioms[found[1:max_found]])
if (length(found) == 0) return("找不到可以接龙的成语")
if (length(found) <= max_found) return(Vector_Idioms[found[1:max_found]])
}
ui <- fluidPage(
#shinythemes::themeSelector(),
theme = shinytheme("flatly"),
# Application title
titlePanel("成语接龙"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput("idioms_id",label ="请输入一个成语",value = " "),
actionButton("update", "continue")
),
# Show the result
mainPanel(
h3("成语接龙:"),
verbatimTextOutput("textPlot")
)
)
)
server <- function(input, output) {
results <- eventReactive(input$update, {
lookupIdioms(trimws(input$idioms_id),max_found = 1)
})
output$textPlot <- renderText(results())
}
# Run the application
shinyApp(ui = ui, server = server)
if (length(found) == 0) return("找不到可以接龙的成语,你赢了！")
if(length(which(Vector_Idioms == find_idioms))==0) return("你输入的不是成语，我赢了!")
lookupIdioms <- function (find_idioms,max_found = 1) {
if(length(which(Vector_Idioms == find_idioms))==0) return("你输入的不是成语，我赢了!")
#get the last char
key <- getlastKey(find_idioms)
found <- which(keys == key)
if (length(found) > max_found) return(Vector_Idioms[found[1:max_found]])
if (length(found) == 0) return("找不到可以接龙的成语,你赢了！")
if (length(found) <= max_found) return(Vector_Idioms[found[1:max_found]])
}
ui <- fluidPage(
#shinythemes::themeSelector(),
theme = shinytheme("flatly"),
# Application title
titlePanel("成语接龙"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput("idioms_id",label ="请输入一个成语",value = " "),
actionButton("update", "continue")
),
# Show the result
mainPanel(
h3("成语接龙:"),
verbatimTextOutput("textPlot")
)
)
)
server <- function(input, output) {
results <- eventReactive(input$update, {
lookupIdioms(trimws(input$idioms_id),max_found = 1)
})
output$textPlot <- renderText(results())
}
# Run the application
shinyApp(ui = ui, server = server)
if(length(which(Vector_Idioms == find_idioms))==0) return("哈哈，你输入的不是成语，我赢了!")
getfirstKeys <- function(input_idioms)
{
key <- stri_sub(input_idioms, from = 1,to = 1)
return(key)
}
#get the fisrt char index
keys <- getfirstKeys(Vector_Idioms)
lookupIdioms <- function (find_idioms,max_found = 1) {
if(length(which(Vector_Idioms == find_idioms))==0) return("哈哈，你输入的不是成语，我赢了!")
#get the last char
key <- getlastKey(find_idioms)
found <- which(keys == key)
if (length(found) > max_found) return(Vector_Idioms[found[1:max_found]])
if (length(found) == 0) return("呜呜,找不到可以接龙的成语,我认输！")
if (length(found) <= max_found) return(Vector_Idioms[found[1:max_found]])
}
ui <- fluidPage(
#shinythemes::themeSelector(),
theme = shinytheme("flatly"),
# Application title
titlePanel("成语接龙"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput("idioms_id",label ="请输入一个成语",value = " "),
actionButton("update", "continue")
),
# Show the result
mainPanel(
h3("成语接龙:"),
verbatimTextOutput("textPlot")
)
)
)
server <- function(input, output) {
results <- eventReactive(input$update, {
lookupIdioms(trimws(input$idioms_id),max_found = 1)
})
output$textPlot <- renderText(results())
}
# Run the application
shinyApp(ui = ui, server = server)
??shiny
help(shiny)
help(shiny)
ui <- fluidPage(
#shinythemes::themeSelector(),
theme = shinytheme("flatly"),
# Application title
titlePanel("Start Game"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput("idioms_id",label ="请输入一个成语",value = " "),
actionButton("update", "continue"),
actionButton("update", "exit")
),
# Show the result
mainPanel(
h3("成语接龙:"),
verbatimTextOutput("textPlot")
)
)
)
titlePanel("Start Game"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput("idioms_id",label ="请输入一个成语",value = " "),
actionButton("update", "continue"),
actionButton("update", "exit")
),
# Show the result
mainPanel(
h3("成语接龙:"),
verbatimTextOutput("textPlot")
)
)
)
server <- function(input, output) {
results <- eventReactive(input$update, {
lookupIdioms(trimws(input$idioms_id),max_found = 1)
})
output$textPlot <- renderText(results())
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
#shinythemes::themeSelector(),
theme = shinytheme("flatly"),
# Application title
titlePanel("Start Game"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput("idioms_id",label ="请输入一个成语",value = " "),
actionButton("update", "continue"),
actionButton("update", "exit")
),
# Show the result
mainPanel(
h3("成语接龙:"),
verbatimTextOutput("textPlot")
)
)
)
ui <- fluidPage(
#shinythemes::themeSelector(),
theme = shinytheme("flatly"),
# Application title
titlePanel("Start Game"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput("idioms_id",label ="请输入一个成语",value = " "),
actionButton("update", "continue"),
actionButton("update", "exit")
),
# Show the result
mainPanel(
h3("成语接龙:"),
verbatimTextOutput("textPlot")
)
)
)
ui <- fluidPage(
#shinythemes::themeSelector(),
theme = shinytheme("flatly"),
# Application title
titlePanel("Start Game"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput("idioms_id",label ="请输入一个成语",value = " "),
actionButton("update", "continue"),
actionButton("update", " exit ")
),
# Show the result
mainPanel(
h3("成语接龙:"),
verbatimTextOutput("textPlot")
)
)
)
actionButton("update", " exit ")
),
# Show the result
mainPanel(
h3("成语接龙:"),
verbatimTextOutput("textPlot")
)
)
)
server <- function(input, output) {
results <- eventReactive(input$update, {
lookupIdioms(trimws(input$idioms_id),max_found = 1)
})
output$textPlot <- renderText(results())
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
#shinythemes::themeSelector(),
theme = shinytheme("flatly"),
# Application title
titlePanel("Start Game"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput("idioms_id",label ="请输入一个成语",value = " "),
actionButton("update", "continue"),
actionButton("update", "   exit   ")
),
# Show the result
mainPanel(
h3("成语接龙:"),
verbatimTextOutput("textPlot")
)
)
)
actionButton("update", "   exit   ")
),
# Show the result
mainPanel(
h3("成语接龙:"),
verbatimTextOutput("textPlot")
)
)
)
server <- function(input, output) {
results <- eventReactive(input$update, {
lookupIdioms(trimws(input$idioms_id),max_found = 1)
})
output$textPlot <- renderText(results())
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
#shinythemes::themeSelector(),
theme = shinytheme("flatly"),
# Application title
titlePanel("Start Game"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput("idioms_id",label ="请输入一个成语",value = " "),
actionButton("update", "continue"),
actionButton("update", "   exit   ")
helpText("Create demographic maps with
information from the 2010 US Census.")
),
# Show the result
mainPanel(
h3("成语接龙:"),
verbatimTextOutput("textPlot")
)
)
actionButton("update", "continue"),
actionButton("update", "   exit   "),
helpText("Create demographic maps with
information from the 2010 US Census.")
),
# Show the result
mainPanel(
h3("成语接龙:"),
verbatimTextOutput("textPlot")
)
)
)
server <- function(input, output) {
results <- eventReactive(input$update, {
lookupIdioms(trimws(input$idioms_id),max_found = 1)
})
output$textPlot <- renderText(results())
}
# Run the application
shinyApp(ui = ui, server = server)
sidebarLayout(
sidebarPanel(
textInput("idioms_id",label ="请输入一个成语",value = " "),
actionButton("update", "continue"),
actionButton("update", "   exit   "),
helpText("Create demographic maps with
information from the 2010 US Census.")
)
# Show the result
mainPanel(
h3("成语接龙:"),
verbatimTextOutput("textPlot")
)
)
)
server <- function(input, output) {
results <- eventReactive(input$update, {
lookupIdioms(trimws(input$idioms_id),max_found = 1)
})
output$textPlot <- renderText(results())
}
# Run the application
shinyApp(ui = ui, server = server)
helpText("Create demographic maps with
information from the 2010 US Census.")
sidebarLayout(
sidebarPanel(
textInput("idioms_id",label ="请输入一个成语",value = " "),
actionButton("update", "continue"),
actionButton("update", "   exit   "),
helpText("123.")
),
# Show the result
mainPanel(
h3("成语接龙:"),
verbatimTextOutput("textPlot")
)
)
)
server <- function(input, output) {
results <- eventReactive(input$update, {
lookupIdioms(trimws(input$idioms_id),max_found = 1)
})
output$textPlot <- renderText(results())
}
# Run the application
shinyApp(ui = ui, server = server)
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White", "Percent Black",
"Percent Hispanic", "Percent Asian"),
selected = "Percent White"),
<- fluidPage(
#shinythemes::themeSelector(),
theme = shinytheme("flatly"),
# Application title
titlePanel("Start Game"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput("idioms_id",label ="请输入一个成语",value = " "),
actionButton("update", "continue"),
actionButton("update", "   exit   "),
),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White", "Percent Black",
"Percent Hispanic", "Percent Asian"),
selected = "Percent White"),
# Show the result
mainPanel(
h3("成语接龙:"),
verbatimTextOutput("textPlot")
)
)
)
server <- function(input, output) {
results <- eventReactive(input$update, {
lookupIdioms(trimws(input$idioms_id),max_found = 1)
})
output$textPlot <- renderText(results())
}
# Run the application
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
